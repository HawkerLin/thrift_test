/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Calcu_H
#define Calcu_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "simple01_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CalcuIf {
 public:
  virtual ~CalcuIf() {}
  virtual void add(std::vector<double> & _return, const num& b2) = 0;
};

class CalcuIfFactory {
 public:
  typedef CalcuIf Handler;

  virtual ~CalcuIfFactory() {}

  virtual CalcuIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CalcuIf* /* handler */) = 0;
};

class CalcuIfSingletonFactory : virtual public CalcuIfFactory {
 public:
  CalcuIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CalcuIf>& iface) : iface_(iface) {}
  virtual ~CalcuIfSingletonFactory() {}

  virtual CalcuIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CalcuIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CalcuIf> iface_;
};

class CalcuNull : virtual public CalcuIf {
 public:
  virtual ~CalcuNull() {}
  void add(std::vector<double> & /* _return */, const num& /* b2 */) {
    return;
  }
};

typedef struct _Calcu_add_args__isset {
  _Calcu_add_args__isset() : b2(false) {}
  bool b2 :1;
} _Calcu_add_args__isset;

class Calcu_add_args {
 public:

  Calcu_add_args(const Calcu_add_args&);
  Calcu_add_args& operator=(const Calcu_add_args&);
  Calcu_add_args() {
  }

  virtual ~Calcu_add_args() throw();
  num b2;

  _Calcu_add_args__isset __isset;

  void __set_b2(const num& val);

  bool operator == (const Calcu_add_args & rhs) const
  {
    if (!(b2 == rhs.b2))
      return false;
    return true;
  }
  bool operator != (const Calcu_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calcu_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Calcu_add_pargs {
 public:


  virtual ~Calcu_add_pargs() throw();
  const num* b2;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calcu_add_result__isset {
  _Calcu_add_result__isset() : success(false) {}
  bool success :1;
} _Calcu_add_result__isset;

class Calcu_add_result {
 public:

  Calcu_add_result(const Calcu_add_result&);
  Calcu_add_result& operator=(const Calcu_add_result&);
  Calcu_add_result() {
  }

  virtual ~Calcu_add_result() throw();
  std::vector<double>  success;

  _Calcu_add_result__isset __isset;

  void __set_success(const std::vector<double> & val);

  bool operator == (const Calcu_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Calcu_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Calcu_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Calcu_add_presult__isset {
  _Calcu_add_presult__isset() : success(false) {}
  bool success :1;
} _Calcu_add_presult__isset;

class Calcu_add_presult {
 public:


  virtual ~Calcu_add_presult() throw();
  std::vector<double> * success;

  _Calcu_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CalcuClient : virtual public CalcuIf {
 public:
  CalcuClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalcuClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(std::vector<double> & _return, const num& b2);
  void send_add(const num& b2);
  void recv_add(std::vector<double> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CalcuProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CalcuIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CalcuProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CalcuProcessor(::apache::thrift::stdcxx::shared_ptr<CalcuIf> iface) :
    iface_(iface) {
    processMap_["add"] = &CalcuProcessor::process_add;
  }

  virtual ~CalcuProcessor() {}
};

class CalcuProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CalcuProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< CalcuIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CalcuIfFactory > handlerFactory_;
};

class CalcuMultiface : virtual public CalcuIf {
 public:
  CalcuMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<CalcuIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CalcuMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<CalcuIf> > ifaces_;
  CalcuMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<CalcuIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(std::vector<double> & _return, const num& b2) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(_return, b2);
    }
    ifaces_[i]->add(_return, b2);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CalcuConcurrentClient : virtual public CalcuIf {
 public:
  CalcuConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CalcuConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(std::vector<double> & _return, const num& b2);
  int32_t send_add(const num& b2);
  void recv_add(std::vector<double> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
